# Generated by Django 4.0.5 on 2022-07-14 20:20

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_absolute', models.BooleanField()),
                ('last_access_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('puuid', models.CharField(default='', max_length=100)),
                ('summoner_id', models.CharField(default='', max_length=100)),
                ('account_id', models.CharField(default='', max_length=100)),
                ('region', models.CharField(choices=[('euw1', 'euw1'), ('br1', 'br1'), ('eun1', 'eun1'), ('jp1', 'jp1'), ('kr1', 'kr1'), ('la1', 'la1'), ('la2', 'la2'), ('oc1', 'oc1'), ('ru', 'ru'), ('tr1', 'tr1')], default='euw1', max_length=10)),
                ('platform', models.CharField(choices=[('europe', 'europe'), ('americas', 'americas'), ('asia', 'asia')], default='europe', max_length=10)),
                ('last_data_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('tier', models.CharField(choices=[('IRON', 'IRON'), ('BRONZE', 'BRONZE'), ('SILVER', 'SILVER'), ('GOLD', 'GOLD'), ('PLATINUM', 'PLATINUM'), ('DIAMOND', 'DIAMOND'), ('MASTER_PLUS', 'MASTER_PLUS')], default='SILVER', max_length=100)),
                ('rank', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III'), ('IV', 'IV')], default='I', max_length=5)),
                ('lp', models.IntegerField(default=0)),
                ('wins', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
                ('winrate', models.FloatField(default=0)),
                ('streak', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Challenge_Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starting_rank', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III'), ('IV', 'IV')], max_length=20)),
                ('starting_tier', models.CharField(choices=[('IRON', 'IRON'), ('BRONZE', 'BRONZE'), ('SILVER', 'SILVER'), ('GOLD', 'GOLD'), ('PLATINUM', 'PLATINUM'), ('DIAMOND', 'DIAMOND'), ('MASTER_PLUS', 'MASTER_PLUS')], max_length=30)),
                ('starting_lp', models.IntegerField()),
                ('ignored', models.BooleanField(default=False)),
                ('progress', models.IntegerField(default=0)),
                ('progress_delta', models.IntegerField(default=0)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('challenge_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.challenge')),
                ('player_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.player')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='challenge_player',
            index=models.Index(fields=['player_id', 'challenge_id'], name='tracker_cha_player__e101e3_idx'),
        ),
    ]
